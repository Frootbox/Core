<?php
/**
 * @author Jan Habbo BrÃ¼ning
 */

namespace Frootbox\Persistence\Repositories;

/**
 *
 */
class Extensions extends \Frootbox\Db\Model {

    use \Frootbox\Traits\GetExtensionPath;

    protected $table = 'extensions';
    protected $class = \Frootbox\Persistence\Extension::class;

    /**
     * @param \Frootbox\Config\Config $config
     * @return bool
     * @throws \Frootbox\Exceptions\NotFound
     */
    public function writeAutoloader (
        \Frootbox\Config\Config $config
    ): bool
    {
        // Generate cache-file name
        $cacheFile = $config->get('filesRootFolder') . 'cache' . DIRECTORY_SEPARATOR . 'system' . DIRECTORY_SEPARATOR . 'autoload.php';

        // Fetch active extensions
        $headers = $this->fetch([
            'where' => [
                'isactive' => 1,
            ],
        ]);

        // Build autoloader source
        $source = '<?php' . PHP_EOL . '/**' . PHP_EOL . ' * Autogenerated extension autoloader' . PHP_EOL . ' */' . PHP_EOL . PHP_EOL;
        $source .= 'if (__FILE__ != \'' . $cacheFile . '\')' . PHP_EOL . '{' . PHP_EOL . '    throw new \Frootbox\Exceptions\ResourceInvalid();' . PHP_EOL . '}' . PHP_EOL . PHP_EOL;

        foreach ($headers as $xextension) {

            $extPath = $this->getExtensionPath($config, $xextension->getVendorId(), $xextension->getExtensionId());

            $source .= '/** ' . PHP_EOL . ' * Extension ' . $xextension->getVendorId() . '/' . $xextension->getExtensionId() . ' autloader ' . PHP_EOL . ' */'. PHP_EOL;
            $source .= 'spl_autoload_register(function ( $class ) {' . PHP_EOL . PHP_EOL;
            $source .= '    if (strpos($class, \'Frootbox\\\\Ext\\\\' . $xextension->getVendorId() . '\\\\' . $xextension->getExtensionId() . '\\\\\') !== 0) {' . PHP_EOL;
            $source .= '        return;' . PHP_EOL . '    }' . PHP_EOL . PHP_EOL;
            $source .= '    $path = str_replace(\'Frootbox\\\\Ext\\\\' . $xextension->getVendorId() . '\\\\' . $xextension->getExtensionId() . '\\\\\', \'\', $class);' . PHP_EOL;
            $source .= '    $path = str_replace(\'\\\\\', \'/\', $path);' . PHP_EOL . PHP_EOL;
            $source .= '    if ($path != "ExtensionController") {' . PHP_EOL;
            $source .= '        $path = "classes/" . $path;' . PHP_EOL;
            $source .= '    }' . PHP_EOL . PHP_EOL;
            $source .= '    $path = \'' . $extPath . '\' . $path . \'.php\';' . PHP_EOL . PHP_EOL;
            $source .= '    if (file_exists($path)) {' . PHP_EOL;
            $source .= '        require_once $path;' . PHP_EOL;
            $source .= '    }' . PHP_EOL;
            $source .= '});' . PHP_EOL . PHP_EOL . PHP_EOL;
        }

        // Write cache-file
        $file = new \Frootbox\Filesystem\File($cacheFile);
        $file->setSource($source);
        $file->write();

        return true;
    }
}

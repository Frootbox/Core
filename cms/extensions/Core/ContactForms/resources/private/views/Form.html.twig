{% set t = view.getViewhelper('Translator') %}

{% if config.get('recaptcha.v3.key') %}
    {% if not config.get('recaptcha.v3.SkipConsent') %}
        <script nonce="{{ settings.nonce }}" type="text/plain" onload="setRecaptcha();" data-consent="google-recaptcha" src="https://www.google.com/recaptcha/api.js?render={{ config.get('recaptcha.v3.key') }}"></script>
    {% else %}
        <script nonce="{{ settings.nonce }}" onload="setRecaptcha();" src="https://www.google.com/recaptcha/api.js?render={{ config.get('recaptcha.v3.key') }}"></script>
    {% endif %}

    <script nonce="{{ settings.nonce }}">
        var forceReCaptcha = false;
        var recaptchaSiteKey = "{{ config.get('recaptcha.v3.key') }}";

        function setRecaptcha ( ) {

            $('.cookie-consent-message').remove();
            forceReCaptcha = true;
        }
    </script>
{% endif %}

<script nonce="{{ settings.nonce }}">
    var _messageYourDataHasBeenSend = "{{ t.translate('YourDataHasBeenSend') }}";
    var _messageFormHasAlreadyBeenSent = "{{ t.translate('FormHasAlreadyBeenSent') }}";
    var _messageDataCouldNotBeSent = "{{ t.translate('DataCouldNotBeSent') }}";

    $(function ( ) {

        /**
         *
         */
        $(document).on('submit', '.contactform.ajax.form', function ( event ) {

            event.preventDefault();
            event.stopImmediatePropagation();

            var form = $(this);

            if (form.hasClass('is-buisy')) {
                alert(_messageFormHasAlreadyBeenSent);
                return;
            }

            form.addClass('is-buisy');

            if (typeof forceReCaptcha != "undefined" && forceReCaptcha) {

                grecaptcha.ready(function() {
                    grecaptcha.execute(recaptchaSiteKey, { action: 'submit' }).then(function(token) {

                        form.append('<input type="hidden" class="recaptchaToken" name="token" />');
                        form.find('.recaptchaToken').val(token);

                        _contactFormSubmitForm(form);
                    });
                });
            }
            else {
                _contactFormSubmitForm(form);
            }
        });
    });

    function _contactFormSubmitForm(form) {

        $.ajax({
            url: form.attr('action'),
            data: form.serialize(),
            method: 'post',
            dataType: 'json',
            success: function ( response ) {

                if (typeof response.callback != "undefined") {
                    window[response.callback]();
                    return;
                }

                if (typeof response.redirect != "undefined") {
                    window.location.href = response.redirect;
                    return;
                }

                alert(_messageYourDataHasBeenSend);

                form.find('input:not([type=hidden], [type=checkbox]), textarea').val('');
                form.find('input[type="checkbox"]').prop('checked', false);
                form.find('.dz-preview').remove();
                form.find('.filesReceiver').html('');

                form.removeClass('is-buisy');
                $('#recaptchaToken').remove();
            },
            error: function ( xhr ) {

                var response = xhr.responseText;

                if (response.charAt(0) != '{') {
                    console.log(response);
                    alert(_messageDataCouldNotBeSent);
                }
                else {
                    response = $.parseJSON(response);
                    alert(response.error);
                }

                form.removeClass('is-buisy');
                $('#recaptchaToken').remove();
            }
        });
    }
</script>

<form method="post" class="{{ addedClassName }} contactform ajax form" id="form{{ form.getId() }}" action="{{ form.getAction({ pluginId: plugin.getId() }) }}">

    <input type="hidden" name="_xparams[redirect]" value="{{ redirect }}" />

    {% if config.get('recaptcha.v3.key') %}
        <div style="border: 3px solid red; padding: 20px; margin-bottom: 40px;" class="cookie-consent-message">
            {{ t.translate('CookieConsentNotice') | raw }}
        </div>
    {% endif %}

    {% if addedPayload %}
        <input type="hidden" name="addedPayload" value="{{ addedPayload | json_encode }}" />
    {% endif %}

    {% set requiredFields = false %}

    {% for group in form.getGroups() %}
        <div class="group-wrapper {{ group.getConfig('className') }}" data-group="{{ group.getId() }}">
            <div class="row {% if group.getConfig('alignItemsEnd') %}align-items-end{% endif %}">

                {% if group.getTitle() %}
                    <div class="col-md-12">
                        <h3 class="title">{{ group.getTitle() }}</h3>
                    </div>
                {% endif %}

                {% for column in group.getColumns() %}
                    <div class="col-md-{{ column.columns }}">

                        <div class="group-details">
                            {% for field in column.fields %}
                                {{ renderer.renderField(field) | raw }}

                                {% if field.isRequired() %}
                                    {% set requiredFields = true %}
                                {% endif %}

                            {% endfor %}
                        </div>

                    </div>
                {% endfor %}
            </div>
        </div>
    {% endfor %}

    {% if requiredFields %}
        <div class="info-required-fields" style="margin-top: 20px; font-size: 16px; color: #999;">
            {{ t.translate('MarkedFieldsAreMendatory') }}
        </div>
    {% endif %}

</form>

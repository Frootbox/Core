<?php
/**
 *
 */

namespace Frootbox\Ext\Core\Navigation\Navigations\Items;

abstract class AbstractItem extends \Frootbox\Persistence\AbstractRow
{
    use \Frootbox\Persistence\Traits\Config;
    use \Frootbox\Persistence\Traits\Visibility;

    protected $table = 'navigations_items';
    protected $model = \Frootbox\Persistence\Repositories\NavigationsItems::class;

    protected $classes = [];

    protected $isAutogenerated = false;
    protected $hasAditionalHtml = false;
    protected $hasAutoItems = false;
    protected ?string $target = null;

    /**
     *
     */
    public function addClass(string $class): void
    {
        $this->classes[] = $class;
    }

    /**
     *
     */
    public function getClasses(): array
    {
        return $this->classes;
    }

    /**
     *
     */
    abstract public function getHref(): string;

    /**
     *
     */
    public function getItems(): ?\Frootbox\Db\Result
    {
        if ($this instanceof \Frootbox\Ext\Core\Navigation\Navigations\Items\Dummy) {
            return null;
        }

        $where = [
            'navId' => $this->getNavId(),
            'parentId' => $this->getId(),
            'language' => $this->getLanguage(),
        ];

        if (empty($params['ignoreVisibility'])) {
            $where[] = new \Frootbox\Db\Conditions\GreaterOrEqual('visibility',(IS_EDITOR ? 1 : 2));
        }

        // Fetch items
        $result = $this->getModel()->fetch([
            'where' => $where,
            'order' => [
                'orderID DESC',
                'id ASC',
            ],
        ]);

        return $result;
    }

    /**
     *
     */
    final public function getItemsDefault(): \Frootbox\Db\Result
    {
        // return null;
        $result = $this->getModel()->fetch([
            'where' => [
                'navId' => $this->getNavId(),
                'parentId' => $this->getId(),
                'language' => $this->getLanguage(),
            ],
            'order' => [
                'orderID DESC',
                'id ASC',
            ],
        ]);

        return $result;
    }

    /**
     * Get path of navigation item
     */
    abstract public function getPath(): string;

    /**
     * @return string|null
     */
    public function getTarget(): ?string
    {
        return $this->target;
    }

    /**
     *
     */
    public function isActive(array $parameters): bool
    {
        return false;
    }

    /**
     *
     */
    public function hasAdditionalHtml(): bool
    {
        return $this->hasAditionalHtml;
    }

    /**
     *
     */
    public function hasAutoItems(): bool
    {
        return $this->hasAutoItems;
    }

    /**
     *
     */
    public function isAutogenerated(): bool
    {
        return $this->isAutogenerated;
    }

    public function setTarget(string $target = null): void
    {
        $this->target = $target;
    }


    /**
     * @param \Frootbox\Http\Post $post
     * @return void
     */
    abstract public function updateFromPost(\Frootbox\Http\Post $post): void;
}


<div id="error-messages" class="d-none message error"></div>

<script src="https://js.stripe.com/v3/"></script>

<div id="express-checkout-element">
    <!-- Express Checkout Element will be inserted here -->
</div>

<form id="payment-form">

    <div class="card">
        <div class="card-body">
            <div id="link-authentication-element">
                <!--Stripe.js injects the Link Authentication Element-->
            </div>
            <div id="payment-element">
                <!--Stripe.js injects the Payment Element-->
            </div>

            <div id="payment-message" class="hidden"></div>
        </div>
    </div>

    {% if plugin.getShopConfig('generalTermsLink') %}
        <div class="form-group form-check">
            <input type="checkbox" required="" class="form-check-input" id="generalTerms" name="generalTerms">
            <label class="form-check-label" for="generalTerms">{{ t.translate('AcceptGeneralTerms', [ plugin.getShopConfig('generalTermsLink') ]) | raw }}</label>
        </div>
    {% endif %}

    <div class="form-group form-check">
        <input type="checkbox" required="" class="form-check-input" id="privacyPolicy" name="privacyPolicy">
        <label class="form-check-label" for="privacyPolicy">{{ t.translate('AcceptPrivacyPolicy', [ i.getPrivacyPolicyLink() ]) | raw }}</label>
    </div>

    <div class="form-group form-check">
        <input type="checkbox" required="" class="form-check-input" id="rightOfWithdrawal" name="rightOfWithdrawal">
        <label class="form-check-label" for="rightOfWithdrawal">{{ t.translate('AcceptRightOfWithdrawal', [ i.getRightOfWithdrawalLink() ]) | raw }}</label>
    </div>

    <div class="text-right">
        <button class="mt-3 btn btn-primary" id="submit">
            <span id="button-text">Jetzt kostenpflichtig bestellen</span>
        </button>
    </div>

</form>

<script>
    const stripe = Stripe('{{ PublicKey }}');
    const clientSecret = "{{ ClientSecret }}";

    const options = {
        mode: 'payment',
        amount: 1099,
        currency: 'usd',
        // Customizable with appearance API.
        appearance: {/*...*/},
    };

    // Set up Stripe.js and Elements to use in checkout form
    const elements = stripe.elements(options);

    // Create and mount the Express Checkout Element
    const expressCheckoutElement = elements.create('expressCheckout');
    expressCheckoutElement.mount('#express-checkout-element');

    const handleError = (error) => {
        const messageContainer = document.querySelector('#error-message');
        messageContainer.textContent = error.message;
    }

    expressCheckoutElement.on('confirm', async (event) => {
        const {error: submitError} = await elements.submit();
        if (submitError) {
            handleError(submitError);
            return;
        }

        // Create the PaymentIntent and obtain clientSecret
        const res = await fetch('/create-intent', {
            method: 'POST',
        });
        const {client_secret: clientSecret} = await res.json();

        const {error} = await stripe.confirmPayment({
            // `elements` instance used to create the Express Checkout Element
            elements,
            // `clientSecret` from the created PaymentIntent
            clientSecret,
            confirmParams: {
                return_url: 'https://example.com/order/123/complete',
            },
        });

        if (error) {
            // This point is only reached if there's an immediate error when
            // confirming the payment. Show the error to your customer (for example, payment details incomplete)
            handleError(error);
        } else {
            // The payment UI automatically closes with a success animation.
            // Your customer is redirected to your `return_url`.
        }
    });
</script>
